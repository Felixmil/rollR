% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roll_dice.R
\name{roll_dice}
\alias{roll_dice}
\title{Roll Dice}
\usage{
roll_dice(cmd, roll_history = FALSE, repetitions = 1, verbose = FALSE)
}
\arguments{
\item{cmd}{character string describing the dice roll to compute.}

\item{roll_history}{boolean, if TRUE, a list of rolltables will be returned along with the result.}

\item{repetitions}{integer value}

\item{verbose}{boolean, if TRUE, dice rolls details are visible in the console.}
}
\value{
result of the dice roll computation, as a rolltable_calculation.
If roll_history is TRUE, a list will be returned with two elements: the result and the roll_history.
The returned roll_history is a named list, with a single rolltable for each dice set.
}
\description{
Main function to use the library. User can provide one or more commands using character strings, and choose to see roll details in the console.
}
\details{
The \code{roll_dice} function parses one or more commands, where each command can be any valid dice set or sets,
using one or more mathematical operations. See \code{\link[base]{Ops}}. Parentheticals are permitted for controlling
order of operations. The \code{roll_dice} function first creates a \code{\link{rolltable}} for each dice set, then
applies the command operations to the rolltable(s). The result is a rolltable_calculation. See \code{\link{calculate}}.
}
\section{Dice sets}{

Dice sets are commands for rolling one or more dice, possibly applying a modifier,
and possibly applying a test for success. The various dice set commands are described at
https://github.com/Felixmil/rollR.

Basic dice sets are:
\itemize{
  \item Integer. A positive integer. Usually used as part of a formula, e.g. 1d20 + 5
  \item Dice: NdX. Roll N dice with sides X. Example: 3d6, 2d20, 1d10.
  \item Fate: Ndf. Roll N Fudge/Fate dice. Typically 4df.
}

Modifications to dice are:
\itemize{
  \item High/Low: 2d20hN or 2d20lN. Keep N highest or N lowest dice from the roll.
        Examples: D&D 5e advantage: 2d20h1. Disadvantage: 2d20l1. Ability roll: 4d6h3.
  \item Reroll: 2d20rN. Reroll whenever N appears, and keep the result.
        Examples: Halflings are lucky and reroll on a 1: 1d20r1.
  \item Exploding: 2d20!N. For each N rolled, roll again and add the result to the initial roll.
        You continue adding rolls as long as N appears.
        Variation: 2d20!>N. Reroll (explode) any N or higher.
        Example: Modified critical: 1d20!>19.
  \item Double: 2d20tN. If N is rolled, then count it twice.
}

Success tests:
\itemize{
  \item Equality: 2d20=N. Only count a success if the roll equals N.
  \item Difficulty check: 2d20>=N. Only count a success if the roll is greater or equal to N.
}

To use a success test along with a modification, just add the success test after the modification.

Spaces: Be careful in using spaces. Die sets should not contain spaces.
For example, '2d20h1>=10' is a difficulty success test; '2d20h1!>10' explodes everything 10 or higher;
'2d20h1 >= 10' is a mathematical operation, comparing the result of the 2d20h1 roll to 10.
}

\section{Operations and rollr classes}{

Rollr introduces two types of classes to facilitate dice rolls and manipulations: rolltable and rolltable_calculation.
Rolltables store all the information needed to recreate the rolls for a dice set. See \code{\link{rolltable}}.
Rolltable calculations are the result of applying \code{\link{calculate}} on a rolltable, or applying a mathematical
operation. For example, \code{roll_dice("4d6 + 2")}. See \code{\link{calculate}} and \code{\link{new_rolltable_calculation}}.
}

\section{Repetitions}{

Rollr can run multiple repetitions of a command, and can use mathematical operations across repetitions.
In rolltables, repetitions are stored in a dataframe.
In rolltable calculations, repetitions are represented by a vector.
}

\examples{

roll_dice("4d6h3")
roll_dice("1d10 + 20")

# See the rolls as they happen
roll_dice("2d20h1", verbose = TRUE)

# Examine roll history and run multiple repetitions
outcome <- roll_dice("4d6!>5 + 1d4", roll_history = TRUE, repetitions = 3)
print(outcome$roll_history, rolls = TRUE)

}
